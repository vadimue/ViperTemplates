@testable import {{ module_info.project_name }}
import XCTest

class {{ module_info.name }}ModuleConfiguratorTests: XCTestCase {

  override func setUp() {
    super.setUp()
  }

  func test_configureModuleForViewInput_setupModule_dependenciesAreCorrect() {

    // arrange
    let viewController = {{ module_info.name }}ViewControllerMock()
    let configurator = {{ module_info.name }}ModuleConfigurator()

    // act
    configurator.configureModuleForViewInput(viewInput: viewController)

    // assert
    XCTAssertNotNil(viewController.output, "{{ module_info.name }}ViewController is nil after configuration")
    XCTAssertTrue(viewController.output is {{ module_info.name }}Presenter, "output is not {{ module_info.name }}Presenter")

    guard let presenter: {{ module_info.name }}Presenter = viewController.output as? {{ module_info.name }}Presenter
      else { XCTFail("presenter in {{ module_info.name }}ViewController is not a {{ module_info.name }}Presenter"); return }
    XCTAssertNotNil(presenter.view, "view in {{ module_info.name }}Presenter is nil after configuration")
    XCTAssertNotNil(presenter.router, "router in {{ module_info.name }}Presenter is nil after configuration")
    XCTAssertTrue(presenter.router is {{ module_info.name }}Router, "router is not {{ module_info.name }}Router")
  }

  class {{ module_info.name }}ViewControllerMock: {{ module_info.name }}ViewController {
  }
}
